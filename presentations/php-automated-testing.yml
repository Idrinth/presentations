title: Automatic Testing in PHP
lang: en
slides:
  - title: Linting
    subpages:
      - title: What is Linting?
        list:
          - Linting is the process of running a program that will analyse code for potential errors
          - Linting is usually done before the code is committed
          - Linting is usually done on the developer's machine and on the CI server
        notes:
          - Linting is usually done on the whole codebase
          - Linting is usually pretty fast
          - IDEs usually lint the code in real time
      - title: Goals
        list:
          - make sure the code is valid from a syntax point of view
          - make sure the code follows standards in terms of formatting
          - reduce the manual effort in code reviews
        notes:
          - Code reviews can focus on the design and logic of the code
          - Code reviews do not have to focus on the syntax and formatting
          - Code reviews can be done faster
      - title: Tools
        list:
          - PHP Code Sniffer
          - PHP Parallel Lint
        notes:
          - PHP Parallel Lint is faster than the PHP inbuilt Lint
          - PHP Parallel Lint checks for syntax errors
          - PHP Code Sniffer checks for formatting and coding standards
          - PHP Code Sniffer can be configured to check for specific standards, usually PSR12 is used
      - title: Configuration (gitlab)
        lang: yaml
        code: |
          # .gitlab-ci.yml
          php-lint:
            stage: test
            image: php:8.1-cli
            script:
              - vendor/bin/parallel-lint --exclude vendor/ .
          psr-12-lint:
            stage: test
            image: php:8.1-cli
            script:
              - vendor/bin/phpcs --standard=PSR12 --extensions=php --ignore=vendor/ .
        notes:
          - PHP Parallel Lint checks the whole codebase except the vendor directory
          - PHP Code Sniffer checks the whole codebase except the vendor directory
  - title: Static Analysis
    subpages:
      - title: What is Static Analysis?
        list:
          - Static Analysis is analysing code without running it
          - Static Analysis is usually done before the code is committed
          - Static Analysis is usually done on the developer's machine and on the CI server
        notes:
          - Static Analysis is usually done on the whole codebase
          - Static Analysis is usually pretty slow
          - Static Analysis can be done in real time in IDEs
      - title: Goals
        list:
          - find potential bugs in the code
          - find potential performance issues in the code
          - find potential security issues in the code
        notes:
          - Static Analysis can find bugs that are hard to find with unit tests
          - Static Analysis can find bugs that are hard to find with manual testing
          - Static Analysis can find bugs that are hard to find with code reviews
      - title: Tools
        list:
          - Psalm
          - PHPStan
          - Phan
        notes:
          - All three are static analysis tools that focus on finding bugs
          - All can be configured to different levels of strictness
          - All can be configured to ignore specific issues
          - None of them can find all bugs
          - All may find false positives
      - title: Configuration (gitlab)
        lang: yaml
        code: |
          # .gitlab-ci.yml
          static-analysis-psalm:
              stage: test
              image: php:8.1-cli
              script:
              - vendor/bin/psalm --show-info=false
          static-analysis-phpstan:
              stage: test
              image: php:8.1-cli
              script:
              - vendor/bin/phpstan analyse --no-progress
          static-analysis-phan:
              stage: test
              image: php:8.1-cli
              script:
              - vendor/bin/phan
        notes:
          - Psalm needs a configuration file in the root of the project
          - PHPstan needs a configuration file in the root of the project
          - Phan needs a configuration file in a specific folder of the project
  - title: Unit Testing
    subpages:
      - title: What is Unit Testing?
        list:
          - Unit Testing is testing a small unit of code in isolation
          - Unit Testing is usually done before the code is committed
          - Unit Testing is usually done on the developer's machine and on the CI server
        notes:
          - Unit Testing is usually done on a single class or function
          - Unit Testing is usually pretty fast
          - Unit Testing is a corner stone of well tested code
          - Unit Testing is a requirement for save refactoring
      - title: Goals
        list:
          - provide fast feedback for developers
          - make sure the code does only what it is supposed to do
          - make sure there are no regressions
          - make sure the code is easy to change
          - make sure mistakes are caught early
        notes:
          - Unit Testing is time intensive to start with
          - Unit Testing is time saving in the long run
          - Unit Testing is not a replacement for manual testing
          - Unit Testing is easier on a codebase using Dependency Injection
          - Unit Testing is easier on a codebase using SOLID principles
      - title: Tools
        list:
          - PHPUnit
          - infection
        notes:
          - PHPUnit is the most popular unit testing framework for PHP
          - PHPUnit can be configured to run the tests in parallel
          - infection mutates source code and runs the unit tests to see if they fail
          - infection can be configured to fail if the caught or covered mutation score is too low
      - title: Configuration (gitlab)
        lang: yaml
        code: |
          # .gitlab-ci.yml
          unit-test:
            stage: test
            image: php:8.1-cli
            script:
              - vendor/bin/phpunit --coverage-text
          mutation-test:
            stage: test
            image: php:8.1-cli
            script:
              - vendor/bin/infection --min-msi=60 --min-covered-msi=60
        notes:
          - PHPUnit must pass for infection to pass
          - The coverage reported by PHPUnit is only a hint at how well code is tested
          - The mutation score reported by infection is a hint at how well small mistakes are found